#pragma checksum "C:\Users\Cliente\source\repos\TCC\Aplicação\ControlRH\ControlRH\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "259533d2e89d14e9816de52141a9fd4df5e340ac"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Cliente\source\repos\TCC\Aplicação\ControlRH\ControlRH\Views\_ViewImports.cshtml"
using ControlRH;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Cliente\source\repos\TCC\Aplicação\ControlRH\ControlRH\Views\_ViewImports.cshtml"
using ControlRH.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\Cliente\source\repos\TCC\Aplicação\ControlRH\ControlRH\Views\Home\Index.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"259533d2e89d14e9816de52141a9fd4df5e340ac", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"26c600f2a0ca1047f9dc6b137b3f013d4540face", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 4 "C:\Users\Cliente\source\repos\TCC\Aplicação\ControlRH\ControlRH\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<script src=""https://cdn.jsdelivr.net/npm/chart.js""></script>


<div>
    <canvas id=""myChart""></canvas>
</div>

<div>
    <canvas id=""myChartVagas""></canvas>
</div>



<div class=""modal"" id=""modal-update-pass"">
    <div class=""modal-dialog modal-sm modal-dialog-centered"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h4 class=""modal-title"">Alterar</h4>
                <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
            </div>
            <div class=""modal-body"">
                <div class=""row g-2"">
                    <div class=""col-md"">
                        <label>Nova senha<span class=""text-danger"">*</span></label>
                        <input type=""password"" class=""form-control placeholder"" onchange=""OnChangeValidation(this)"" id=""pass"">
                    </div>
                </div>
                <div class=""row g-2"">
                    <div class=""col-md"">
                        <l");
            WriteLiteral(@"abel>Confirmar senha<span class=""text-danger"">*</span></label>
                        <input type=""password"" class=""form-control placeholder"" onchange=""OnChangeValidation(this)"" id=""confirma-pass"">
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-danger"" data-dismiss=""modal"">Alterar depois</button>
                <button type=""button"" class=""btn btn-success"" id=""btn-editar-perfil"" onclick=""updatePassword();"">Salvar</button>
            </div>
        </div>
    </div>
</div>

<script type=""text/javascript"">

    $(document).ready(function () {
        VerifyIfItsDefaultPassword();
        chartFerias();
        chartVagas();
    });


    function chartFerias() {
        var model = {
            aprovacao: 1
        }
        AjaxHelper('GET', '/Ferias/GetAprovacao', model, function (AprovadoR) {
            AjaxHelper('GET', '/Ferias/GetAprovacao', 0, function (ParaApr");
            WriteLiteral(@"ovarR) {
                const labels = [
                    'Férias',
                ];

                const data = {
                    labels: labels,
                    datasets: [{
                        label: 'Aprovado',
                        backgroundColor: 'rgb(153, 255, 153)',
                        borderColor: 'rgb(153, 255, 153)',
                        data: [AprovadoR],
                    },
                    {
                        label: 'Para aprovar',
                        backgroundColor: 'rgb(255, 77, 77)',
                        borderColor: 'rgb(255, 77, 77)',
                        data: [ParaAprovarR],
                    }
                    ]
                };

                const config = {
                    type: 'bar',
                    data: data,
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                               ");
            WriteLiteral(@" position: 'top',
                            },
                            title: {
                                display: true,
                                text: 'Férias'
                            }
                        }
                    },
                };

                const myChart = new Chart(
                    document.getElementById('myChart'),
                    config
                );
            })
        })
    }

    function chartVagas() {
        AjaxHelper('GET', '/Vagas/GetVagasQuantidade', null, function (Vagas) {
            const labels = [
                'Vagas',
            ];

            const data = {
                labels: labels,
                datasets: [{
                    label: 'Vagas',
                    backgroundColor: 'rgb(153, 255, 153)',
                    borderColor: 'rgb(153, 255, 153)',
                    data: [Vagas],
                }]
            };

            const config = {
                t");
            WriteLiteral(@"ype: 'bar',
                data: data,
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Vagas'
                        }
                    }
                },
            };

            const myChart = new Chart(
                document.getElementById('myChartVagas'),
                config
            );
        })
    }

    function VerifyIfItsDefaultPassword() {
        AjaxHelper('GET', '/Home/VerifyIfItsDefaultPassword', null, function (result) {
            if (result) {
                $('#modal-update-pass').modal('show');
            }
        })
    }

    function updatePassword() {
        var model = {
            password: $('#confirma-pass').val(),
        }

        if ($('#confirma-pass').va");
            WriteLiteral(@"l() == $('#pass').val()) {
            AjaxHelper('PUT', '/Home/ChangePassword', model, function (result) {
                if (result) {
                    configureSweetSuccess(""Senha alterada com sucesso!"", ""/Funcionario/Index"")
                }
            })
        }
    }

    function OnChangeValidation(campo) {
        if ($(campo).val() != """") {
            $(campo).css(""border-color"", """")
        }
    }

</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
